// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  playlists     Playlist[]
  likedSongs    LikedSong[]
}

model Artist {
  id          String    @id @default(cuid())
  name        String
  bio         String?   @db.Text
  imageUrl    String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  albums      Album[]
  songs       Song[]
}

model Album {
  id          String    @id @default(cuid())
  title       String
  releaseDate DateTime?
  coverUrl    String?   @db.Text
  artistId    String
  artist      Artist    @relation(fields: [artistId], references: [id])
  songs       Song[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([artistId])
}

model Song {
  id          String    @id @default(cuid())
  title       String
  duration    Int       // Duration in seconds
  audioUrl    String    @db.Text
  albumId     String?
  album       Album?    @relation(fields: [albumId], references: [id])
  artistId    String
  artist      Artist    @relation(fields: [artistId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  playlists   PlaylistSong[]
  likedBy     LikedSong[]

  @@index([albumId])
  @@index([artistId])
}

model Playlist {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  songs       PlaylistSong[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

model PlaylistSong {
  id          String    @id @default(cuid())
  playlistId  String
  songId      String
  addedAt     DateTime  @default(now())
  playlist    Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song        Song      @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@index([songId])
  @@index([playlistId])
}

model LikedSong {
  id        String    @id @default(cuid())
  userId    String
  songId    String
  likedAt   DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  song      Song      @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@index([songId])
  @@index([userId])
} 